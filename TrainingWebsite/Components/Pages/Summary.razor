@page "/summary"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Shared
@using Models = Shared.Models

@inject AppDbContext DbContext
@inject ILogger<Workout> Logger

<h3>Summary</h3>

<label for="exercises">Select exercises:</label>

<select name="exercises" id="exercises" @bind="_selectedExercise" @bind:after="PrintResult">
    <option value="None">None</option>
    @foreach (var e in _exercisesFilter)
    {
        <option value="@e">@e</option>
    }

</select>

<LineChart @ref="_chart" Style="width: 100%"/>

@code {
    private IEnumerable<string> _exercisesFilter = default!;
    private List<DateTime> _dates = [];
    private List<string> _names = [];
    private Dictionary<(DateTime dt, string name), int> _map = [];
    private string _selectedExercise = string.Empty;

    private LineChart _chart = default!;
    private LineChartOptions _chartOptions = default!;
    private ChartData _data = default!;
    private List<Models.WorkoutPlan> _workoutPlans = [];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _chart.InitializeAsync(_data, _chartOptions);
        }
        
        base.OnAfterRender(firstRender);
    }

    protected override void OnInitialized()
    {
        var workoutPlans = UpdateWorkoutPlansNoFilter();
        _workoutPlans = workoutPlans;
        _exercisesFilter = workoutPlans
            .SelectMany(x => x.Workouts)
            .Select(x => x.Name)
            .Distinct();

        // Collect headers
        UpdateDates(workoutPlans);
        UpdateNames(workoutPlans);

        // Populate data based on headers.
        UpdateBody(workoutPlans);
        
        _chartOptions = new LineChartOptions();
        _chartOptions.Plugins.Title!.Text = "Workload";
        _chartOptions.Scales.X = new ChartAxes()
        {
            Title = new ChartAxesTitle() { Text = "Date", Display = true }
        };

        _chartOptions.Scales.Y = new ChartAxes()
        {
            Title = new ChartAxesTitle() { Text = "Sum of workload", Display = true }
        };

        _data = new ChartData()
        {
            Datasets = GetDataset(_workoutPlans, _dates),
            Labels = GetLabels(_dates)
        };
    }

    private List<string>? GetLabels(IEnumerable<DateTime> dates)
    {
        var labels = new List<string>();
        foreach (var d in dates.Order())
        {
            labels.Add(d.ToString("yyyy-MM-dd"));
        }
        return labels;
    }

    private List<IChartDataset>? GetDataset(IEnumerable<Models.WorkoutPlan> workoutPlans, IEnumerable<DateTime> dates)
    { 
        string[] colors = ColorUtility.CategoricalTwelveColors;
        int currentColorIndex = 0;
        var datasets = new List<IChartDataset>();
        var groups = workoutPlans.GroupBy(x => x.Tag);

        foreach(var group in groups)
        {
            var data = new List<double?>();
            foreach (var dt in dates.Select(x => x.ToString("yyyy-MM-dd")))
            {
                // Is there workout plan with that day?
                // If yes, add effort for that day.
                // Otherwise add zero.

                var v = group.FirstOrDefault(x => x.Name.Split(" ").Last().ToLower() == dt.ToLower());
                double? effort = 0;
                if (v is null)
                {
                    effort = null;
                }
                else
                {
                    effort = v.Workouts.SelectMany(x => x.Exercises)
                        .Sum(x => x.Reps * x.Weight);
                }
                data.Add(effort);
            }
            
            var chartDataset = new LineChartDataset()
            {
                Data = data,
                Label = group.Key,
                BackgroundColor = colors[currentColorIndex],
                BorderColor = colors[currentColorIndex++],
                BorderWidth = 2,
                Tension = 0.5,
                SpanGaps = true // If true, lines will be drawn between points with no or null data.
            };
        
            datasets.Add(chartDataset);
        }
        return datasets;
    }

    private List<Models.WorkoutPlan> UpdateWorkoutPlansNoFilter()
    {
        var workoutPlans = DbContext.WorkoutPlans
            .Include(x => x.Workouts)
            .ThenInclude(x => x.Exercises)
            .AsNoTracking()
            .ToList();
        return workoutPlans;
    }

    private void UpdateBody(List<Models.WorkoutPlan> workoutPlans)
    {
        foreach (var wp in workoutPlans)
        {
            string split = wp.Name.Split(" ").Last();
            var dt = Convert.ToDateTime(split);
            foreach (var w in wp.Workouts)
            {
                var name = w.Name;
                int effort = 0;
                foreach (var e in w.Exercises)
                {
                    effort += e.Reps * (int)e.Weight;                
                }
                
                _map.Add((dt, name), effort);
            }
        }
    }

    private void UpdateNames(List<Models.WorkoutPlan> workoutPlans)
    {
        foreach (var workoutPlan in workoutPlans)
        {
            _names.AddRange(workoutPlan.Workouts.Select(x => x.Name)); 
        }

        _names = _names.Distinct().ToList();
    }

    private void UpdateDates(List<Models.WorkoutPlan> workoutPlans)
    {
        _dates = workoutPlans.Select(x =>
        {
            string split = x.Name.Split(" ").Last();
            var dt = Convert.ToDateTime(split);
            return dt;
        }).Distinct().Order().ToList();
    }

    private void PrintResult()
    {
        Logger.LogInformation("Selected value is: {s}", _selectedExercise);
        var workoutPlans = _selectedExercise.ToLower() == "none"
            ? UpdateWorkoutPlansNoFilter()
            : UpdateWorkoutPlanFilter(_selectedExercise);
        _workoutPlans = workoutPlans;

        _dates.Clear();
        _names.Clear();
        _map.Clear();
        
        UpdateDates(workoutPlans);
        UpdateNames(workoutPlans);
        UpdateBody(workoutPlans);
        
        _chartOptions = new LineChartOptions();
        _chartOptions.Plugins.Title!.Text = "Workload";
        _chartOptions.Scales.X = new ChartAxes()
        {
            Title = new ChartAxesTitle() { Text = "Date", Display = true }
        };

        _chartOptions.Scales.Y = new ChartAxes()
        {
            Title = new ChartAxesTitle() { Text = "Sum of workload", Display = true }
        };

        _data = new ChartData()
        {
            Datasets = GetDataset(_workoutPlans, _dates),
            Labels = GetLabels(_dates)
        };

        if (_selectedExercise.ToLower() != "none")
        {
            ((LineChartDataset)(_data.Datasets.First())).Label = _selectedExercise;
        }

        _chart.UpdateAsync(_data, _chartOptions);
        
        StateHasChanged();
    }

    private List<Models.WorkoutPlan> UpdateWorkoutPlanFilter(string filter)
    {
        return DbContext.WorkoutPlans
            .Include(x => x.Workouts.Where(y => y.Name == filter))
            .ThenInclude(x => x.Exercises)
            .AsNoTracking()
            .Where(x => x.Workouts.Any(y => y.Name == filter))
            .ToList();
    }

}